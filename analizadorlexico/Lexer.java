/* The following code was generated by JFlex 1.6.1 */

import java.util.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>lexico.jflex</tt>
 */
public class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\24\1\24\1\74\1\74\1\24\22\0\1\24\1\54\1\12"+
    "\2\0\1\62\1\52\1\10\1\63\1\64\1\60\1\57\1\73\1\5"+
    "\1\6\1\61\1\2\1\35\1\40\1\37\1\41\1\2\1\36\1\2"+
    "\1\34\1\2\1\71\1\72\1\56\1\53\1\55\2\0\4\1\1\4"+
    "\17\1\1\13\5\1\1\65\1\11\1\66\1\0\1\3\1\0\1\21"+
    "\1\44\1\26\1\46\1\17\1\20\1\30\1\50\1\7\1\1\1\27"+
    "\1\22\1\42\1\33\1\32\1\25\1\1\1\15\1\23\1\14\1\16"+
    "\1\31\1\47\1\43\1\45\1\1\1\67\1\51\1\70\7\0\1\74"+
    "\u1fa2\0\1\74\1\74\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\2\2\1"+
    "\6\2\1\6\5\2\1\1\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\3\1\1\31"+
    "\1\32\1\33\1\34\1\2\1\0\1\35\3\0\22\2"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\31"+
    "\2\0\1\32\10\2\1\45\6\2\1\46\4\2\1\1"+
    "\1\31\1\47\2\2\1\50\2\2\1\51\1\52\5\2"+
    "\1\53\4\2\1\54\1\55\2\2\1\56\1\57\1\2"+
    "\1\60\7\2\1\61\1\2\1\62\1\63\1\2\1\64"+
    "\1\65\2\2\1\66\1\67\1\70\4\2\1\71\1\72"+
    "\1\73\2\2\1\74\1\75\1\2\1\76";

  private static int [] zzUnpackAction() {
    int [] result = new int[162];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\172\0\267\0\364\0\u0131\0\u016e\0\u01ab"+
    "\0\u01e8\0\u0225\0\u0262\0\u029f\0\u02dc\0\u0319\0\u0356\0\75"+
    "\0\u0393\0\u03d0\0\u040d\0\u044a\0\u0487\0\u04c4\0\u0501\0\u053e"+
    "\0\u057b\0\u05b8\0\u05f5\0\u0632\0\75\0\75\0\75\0\75"+
    "\0\75\0\75\0\75\0\75\0\75\0\75\0\75\0\75"+
    "\0\u066f\0\u06ac\0\u06e9\0\u0726\0\u066f\0\75\0\172\0\u0763"+
    "\0\u01ab\0\75\0\u07a0\0\u01e8\0\u07dd\0\u081a\0\u0857\0\u0894"+
    "\0\u08d1\0\u090e\0\u094b\0\u0988\0\u09c5\0\u0a02\0\u0a3f\0\u0a7c"+
    "\0\u0ab9\0\u0af6\0\u0b33\0\u0b70\0\u0bad\0\u0bea\0\u0c27\0\75"+
    "\0\75\0\75\0\75\0\75\0\75\0\75\0\u0c64\0\u0ca1"+
    "\0\u0cde\0\75\0\u0d1b\0\u0d58\0\u0d95\0\u0dd2\0\u0e0f\0\u0e4c"+
    "\0\u0e89\0\u0ec6\0\172\0\u0f03\0\u0f40\0\u0f7d\0\u0fba\0\u0ff7"+
    "\0\u1034\0\172\0\u1071\0\u10ae\0\u10eb\0\u1128\0\u1165\0\u11a2"+
    "\0\172\0\u11df\0\u121c\0\172\0\u1259\0\u1296\0\172\0\172"+
    "\0\u12d3\0\u1310\0\u134d\0\u138a\0\u13c7\0\172\0\u1404\0\u1441"+
    "\0\u147e\0\u14bb\0\172\0\172\0\u14f8\0\u1535\0\172\0\172"+
    "\0\u1572\0\172\0\u15af\0\u15ec\0\u1629\0\u1666\0\u16a3\0\u16e0"+
    "\0\u171d\0\172\0\u175a\0\172\0\172\0\u1797\0\172\0\172"+
    "\0\u17d4\0\u1811\0\172\0\172\0\172\0\u184e\0\u188b\0\u18c8"+
    "\0\u1905\0\172\0\172\0\172\0\u1942\0\u197f\0\172\0\172"+
    "\0\u19bc\0\172";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[162];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\2\3\1\5\1\6\1\7\1\10"+
    "\1\2\1\11\1\3\1\12\1\13\1\14\1\15\1\16"+
    "\2\3\1\17\1\20\1\21\1\22\2\3\1\23\2\3"+
    "\6\4\2\3\1\24\1\3\1\25\2\3\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\77\0\4\3\2\0\1\3\3\0\11\3\1\0"+
    "\24\3\25\0\1\51\1\4\1\52\1\53\1\0\1\54"+
    "\1\55\3\0\4\51\1\53\4\51\1\0\7\51\6\4"+
    "\7\51\31\0\1\56\71\0\1\54\31\0\6\54\34\0"+
    "\4\3\2\0\1\3\3\0\5\3\1\57\3\3\1\0"+
    "\6\3\1\60\15\3\24\0\10\61\1\62\1\63\63\61"+
    "\11\64\1\65\1\62\62\64\1\0\4\3\2\0\1\3"+
    "\3\0\2\3\1\66\6\3\1\0\24\3\25\0\4\3"+
    "\2\0\1\3\3\0\4\3\1\67\4\3\1\0\24\3"+
    "\25\0\4\3\2\0\1\70\3\0\11\3\1\0\24\3"+
    "\25\0\4\3\2\0\1\3\3\0\7\3\1\71\1\3"+
    "\1\0\24\3\25\0\4\3\2\0\1\3\3\0\3\3"+
    "\1\72\2\3\1\73\1\74\1\3\1\0\5\3\1\75"+
    "\16\3\25\0\4\3\2\0\1\3\3\0\1\3\1\76"+
    "\7\3\1\0\22\3\1\77\1\3\25\0\4\3\2\0"+
    "\1\3\3\0\6\3\1\100\2\3\1\0\24\3\25\0"+
    "\4\3\2\0\1\3\3\0\6\3\1\101\2\3\1\0"+
    "\5\3\1\102\16\3\25\0\4\3\2\0\1\3\3\0"+
    "\6\3\1\103\2\3\1\0\24\3\25\0\4\3\2\0"+
    "\1\3\3\0\2\3\1\104\6\3\1\0\5\3\1\105"+
    "\12\3\1\106\3\3\25\0\4\3\2\0\1\3\3\0"+
    "\4\3\1\107\4\3\1\0\24\3\75\0\1\110\75\0"+
    "\1\111\75\0\1\112\74\0\1\113\74\0\1\114\74\0"+
    "\1\115\100\0\1\116\16\0\4\51\2\0\1\51\3\0"+
    "\11\51\1\0\24\51\25\0\1\51\1\4\2\51\2\0"+
    "\1\51\3\0\11\51\1\0\7\51\6\4\7\51\25\0"+
    "\1\51\1\117\2\51\1\120\1\0\1\51\3\0\11\51"+
    "\1\0\7\51\6\117\7\51\6\0\1\120\17\0\1\54"+
    "\1\0\1\121\2\0\1\122\7\0\1\121\14\0\6\54"+
    "\34\0\4\3\2\0\1\3\3\0\1\3\1\123\7\3"+
    "\1\0\24\3\34\0\4\61\2\0\1\61\14\0\1\61"+
    "\7\0\1\61\41\0\4\64\2\0\1\64\14\0\1\64"+
    "\7\0\1\64\32\0\4\3\2\0\1\3\3\0\3\3"+
    "\1\124\5\3\1\0\24\3\25\0\4\3\2\0\1\3"+
    "\3\0\1\3\1\125\7\3\1\0\24\3\25\0\4\3"+
    "\2\0\1\3\3\0\11\3\1\0\6\3\1\126\15\3"+
    "\25\0\4\3\2\0\1\3\3\0\10\3\1\127\1\0"+
    "\24\3\25\0\4\3\2\0\1\3\3\0\11\3\1\0"+
    "\6\3\1\130\15\3\25\0\4\3\2\0\1\3\3\0"+
    "\7\3\1\131\1\3\1\0\24\3\25\0\4\3\2\0"+
    "\1\3\3\0\11\3\1\0\5\3\1\132\16\3\25\0"+
    "\4\3\2\0\1\3\3\0\2\3\1\133\6\3\1\0"+
    "\24\3\25\0\4\3\2\0\1\3\3\0\2\3\1\134"+
    "\6\3\1\0\24\3\25\0\4\3\2\0\1\135\3\0"+
    "\11\3\1\0\24\3\25\0\4\3\2\0\1\3\3\0"+
    "\11\3\1\0\1\3\1\136\22\3\25\0\4\3\2\0"+
    "\1\3\3\0\10\3\1\137\1\0\24\3\25\0\4\3"+
    "\2\0\1\3\3\0\11\3\1\0\6\3\1\140\6\3"+
    "\1\141\6\3\25\0\4\3\2\0\1\3\3\0\2\3"+
    "\1\142\6\3\1\0\24\3\25\0\4\3\2\0\1\3"+
    "\3\0\4\3\1\143\4\3\1\0\24\3\25\0\4\3"+
    "\2\0\1\3\3\0\11\3\1\0\5\3\1\144\16\3"+
    "\25\0\4\3\2\0\1\3\3\0\1\3\1\145\7\3"+
    "\1\0\24\3\25\0\4\3\2\0\1\3\3\0\5\3"+
    "\1\146\3\3\1\0\24\3\25\0\1\51\1\117\1\147"+
    "\1\51\2\0\1\55\3\0\11\51\1\0\7\51\6\117"+
    "\7\51\26\0\1\150\31\0\6\150\35\0\1\150\2\0"+
    "\1\120\26\0\6\150\15\0\1\120\16\0\4\3\2\0"+
    "\1\3\3\0\11\3\1\0\7\3\1\151\1\152\1\3"+
    "\1\153\11\3\25\0\4\3\2\0\1\3\3\0\4\3"+
    "\1\154\4\3\1\0\24\3\25\0\4\3\2\0\1\3"+
    "\3\0\3\3\1\155\5\3\1\0\24\3\25\0\4\3"+
    "\2\0\1\3\3\0\1\3\1\156\7\3\1\0\24\3"+
    "\25\0\4\3\2\0\1\3\3\0\4\3\1\157\4\3"+
    "\1\0\24\3\25\0\4\3\2\0\1\3\3\0\11\3"+
    "\1\0\1\3\1\160\22\3\25\0\4\3\2\0\1\3"+
    "\3\0\10\3\1\124\1\0\24\3\25\0\4\3\2\0"+
    "\1\3\3\0\6\3\1\161\2\3\1\0\24\3\25\0"+
    "\4\3\2\0\1\162\3\0\3\3\1\163\5\3\1\0"+
    "\24\3\25\0\4\3\2\0\1\3\3\0\1\3\1\164"+
    "\7\3\1\0\24\3\25\0\4\3\2\0\1\3\3\0"+
    "\11\3\1\0\2\3\1\165\21\3\25\0\4\3\2\0"+
    "\1\3\3\0\4\3\1\166\4\3\1\0\24\3\25\0"+
    "\4\3\2\0\1\3\3\0\1\3\1\167\6\3\1\170"+
    "\1\0\24\3\25\0\4\3\2\0\1\3\3\0\11\3"+
    "\1\0\1\171\23\3\25\0\4\3\2\0\1\3\3\0"+
    "\6\3\1\172\2\3\1\0\24\3\25\0\4\3\2\0"+
    "\1\3\3\0\7\3\1\173\1\3\1\0\24\3\25\0"+
    "\4\3\2\0\1\3\3\0\4\3\1\174\4\3\1\0"+
    "\24\3\25\0\4\3\2\0\1\3\3\0\4\3\1\175"+
    "\1\3\1\176\2\3\1\0\24\3\25\0\1\51\1\117"+
    "\2\51\2\0\1\51\3\0\11\51\1\0\7\51\6\117"+
    "\7\51\26\0\1\150\1\120\3\0\1\122\24\0\6\150"+
    "\34\0\4\3\2\0\1\3\3\0\11\3\1\0\11\3"+
    "\1\177\12\3\25\0\4\3\2\0\1\3\3\0\11\3"+
    "\1\0\13\3\1\200\10\3\25\0\4\3\2\0\1\3"+
    "\3\0\2\3\1\201\6\3\1\0\24\3\25\0\4\3"+
    "\2\0\1\3\3\0\11\3\1\0\7\3\1\202\1\203"+
    "\13\3\25\0\4\3\2\0\1\3\3\0\1\3\1\204"+
    "\7\3\1\0\24\3\25\0\4\3\2\0\1\3\3\0"+
    "\11\3\1\0\6\3\1\205\15\3\25\0\4\3\2\0"+
    "\1\3\3\0\11\3\1\0\1\3\1\206\22\3\25\0"+
    "\4\3\2\0\1\3\3\0\11\3\1\0\1\3\1\207"+
    "\22\3\25\0\4\3\2\0\1\3\3\0\6\3\1\210"+
    "\2\3\1\0\24\3\25\0\4\3\2\0\1\211\3\0"+
    "\11\3\1\0\24\3\25\0\4\3\2\0\1\3\3\0"+
    "\1\3\1\212\7\3\1\0\24\3\25\0\4\3\2\0"+
    "\1\3\3\0\7\3\1\213\1\3\1\0\24\3\25\0"+
    "\4\3\2\0\1\3\3\0\11\3\1\0\2\3\1\214"+
    "\21\3\25\0\4\3\2\0\1\3\3\0\2\3\1\215"+
    "\6\3\1\0\24\3\25\0\4\3\2\0\1\3\3\0"+
    "\3\3\1\216\5\3\1\0\24\3\25\0\4\3\2\0"+
    "\1\3\3\0\11\3\1\0\6\3\1\217\15\3\25\0"+
    "\4\3\2\0\1\3\3\0\11\3\1\0\11\3\1\220"+
    "\12\3\25\0\4\3\2\0\1\3\3\0\11\3\1\0"+
    "\11\3\1\221\1\222\11\3\25\0\4\3\2\0\1\3"+
    "\3\0\11\3\1\0\3\3\1\223\20\3\25\0\4\3"+
    "\2\0\1\3\3\0\1\3\1\224\7\3\1\0\24\3"+
    "\25\0\4\3\2\0\1\3\3\0\11\3\1\0\23\3"+
    "\1\225\25\0\4\3\2\0\1\3\3\0\11\3\1\0"+
    "\3\3\1\226\20\3\25\0\4\3\2\0\1\3\3\0"+
    "\11\3\1\0\6\3\1\227\15\3\25\0\4\3\2\0"+
    "\1\3\3\0\4\3\1\230\4\3\1\0\24\3\25\0"+
    "\4\3\2\0\1\3\3\0\7\3\1\231\1\3\1\0"+
    "\24\3\25\0\4\3\2\0\1\3\3\0\11\3\1\0"+
    "\14\3\1\232\7\3\25\0\4\3\2\0\1\3\3\0"+
    "\11\3\1\0\13\3\1\233\10\3\25\0\4\3\2\0"+
    "\1\3\3\0\4\3\1\234\4\3\1\0\24\3\25\0"+
    "\4\3\2\0\1\3\3\0\3\3\1\235\5\3\1\0"+
    "\24\3\25\0\4\3\2\0\1\3\3\0\11\3\1\0"+
    "\16\3\1\236\5\3\25\0\4\3\2\0\1\3\3\0"+
    "\1\3\1\237\7\3\1\0\24\3\25\0\4\3\2\0"+
    "\1\3\3\0\4\3\1\240\4\3\1\0\24\3\25\0"+
    "\4\3\2\0\1\3\3\0\11\3\1\0\11\3\1\241"+
    "\12\3\25\0\4\3\2\0\1\3\3\0\11\3\1\0"+
    "\14\3\1\242\7\3\24\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6649];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\15\1\1\11\14\1\14\11\5\1\1\11"+
    "\2\1\1\0\1\11\3\0\22\1\7\11\1\1\2\0"+
    "\1\11\120\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[162];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
private static final int PACKAGE=1;
private static final int VAR=2;
private static final int CONST=3;
private static final int UINT8=4;
private static final int UINT16=5;
private static final int INT8=6;
private static final int INT16=7;
private static final int INT32=8;
private static final int FLOAT32=9;
private static final int FLOAT64=10;
private static final int COMPLEX64=11;
private static final int BYTE=12;
private static final int STRING=13;
private static final int BOOL=14;
private static final int STRUCT=15;
private static final int FUNC=16;
private static final int DEFER=17;
private static final int IF=18;
private static final int ELSE=19;
private static final int SWITCH=20;
private static final int CASE=21;
private static final int DEFAULT=22;
private static final int FOR=23;
private static final int RETURN=24;
private static final int BREAK=25;
private static final int CONTINUE=26;
private static final int OR=27;
private static final int AND=28;
private static final int IGUAL=29;
private static final int DESIGUAL=30;
private static final int MT=31;
private static final int MET=32;
private static final int LT=33;
private static final int LET=34;
private static final int SUMA=35;
private static final int RESTA=36;
private static final int MULTI=37;
private static final int DIVISION=38;
private static final int MODULO=39;
private static final int NEGACION=40;
private static final int DIR=41;
private static final int INCREMENTO=42;
private static final int DECREMENTO=43;
private static final int ASIGNACION=44;
private static final int P1=45;
private static final int P2=46;
private static final int C1=47;
private static final int C2=48;
private static final int L1=49;
private static final int L2=50;
private static final int PUNTO=51;
private static final int DOSPUNTOS=52;
private static final int PUNTOYCOMA=53;
private static final int COMA=54;
private static final int IDENTIFIER=55;
private static final int INT_LIT=56;
private static final int FLOAT_LIT=57;
private static final int IMAGINARY_LIT=58;
private static final int STRING_LIT=59;
private static final int BOOL_LIT=60;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 200) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
          {   return 0;
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("Error "+yytext());
            }
          case 63: break;
          case 2: 
            { return IDENTIFIER;
            }
          case 64: break;
          case 3: 
            { return INT_LIT;
            }
          case 65: break;
          case 4: 
            { return RESTA;
            }
          case 66: break;
          case 5: 
            { return PUNTO;
            }
          case 67: break;
          case 6: 
            { /*No se hace nada*/
            }
          case 68: break;
          case 7: 
            { return DIR;
            }
          case 69: break;
          case 8: 
            { return ASIGNACION;
            }
          case 70: break;
          case 9: 
            { return NEGACION;
            }
          case 71: break;
          case 10: 
            { return MT;
            }
          case 72: break;
          case 11: 
            { return LT;
            }
          case 73: break;
          case 12: 
            { return SUMA;
            }
          case 74: break;
          case 13: 
            { return MULTI;
            }
          case 75: break;
          case 14: 
            { return DIVISION;
            }
          case 76: break;
          case 15: 
            { return MODULO;
            }
          case 77: break;
          case 16: 
            { return P1;
            }
          case 78: break;
          case 17: 
            { return P2;
            }
          case 79: break;
          case 18: 
            { return C1;
            }
          case 80: break;
          case 19: 
            { return C2;
            }
          case 81: break;
          case 20: 
            { return L1;
            }
          case 82: break;
          case 21: 
            { return L2;
            }
          case 83: break;
          case 22: 
            { return DOSPUNTOS;
            }
          case 84: break;
          case 23: 
            { return PUNTOYCOMA;
            }
          case 85: break;
          case 24: 
            { return COMA;
            }
          case 86: break;
          case 25: 
            { return FLOAT_LIT;
            }
          case 87: break;
          case 26: 
            { return IMAGINARY_LIT;
            }
          case 88: break;
          case 27: 
            { return DECREMENTO;
            }
          case 89: break;
          case 28: 
            { return IF;
            }
          case 90: break;
          case 29: 
            { return STRING_LIT;
            }
          case 91: break;
          case 30: 
            { return OR;
            }
          case 92: break;
          case 31: 
            { return AND;
            }
          case 93: break;
          case 32: 
            { return IGUAL;
            }
          case 94: break;
          case 33: 
            { return DESIGUAL;
            }
          case 95: break;
          case 34: 
            { return MET;
            }
          case 96: break;
          case 35: 
            { return LET;
            }
          case 97: break;
          case 36: 
            { return INCREMENTO;
            }
          case 98: break;
          case 37: 
            { return FOR;
            }
          case 99: break;
          case 38: 
            { return VAR;
            }
          case 100: break;
          case 39: 
            { return INT8;
            }
          case 101: break;
          case 40: 
            { return BOOL_LIT;
            }
          case 102: break;
          case 41: 
            { return ELSE;
            }
          case 103: break;
          case 42: 
            { return FUNC;
            }
          case 104: break;
          case 43: 
            { return CASE;
            }
          case 105: break;
          case 44: 
            { return BOOL;
            }
          case 106: break;
          case 45: 
            { return BYTE;
            }
          case 107: break;
          case 46: 
            { return INT16;
            }
          case 108: break;
          case 47: 
            { return INT32;
            }
          case 109: break;
          case 48: 
            { return UINT8;
            }
          case 110: break;
          case 49: 
            { return CONST;
            }
          case 111: break;
          case 50: 
            { return BREAK;
            }
          case 112: break;
          case 51: 
            { return DEFER;
            }
          case 113: break;
          case 52: 
            { return RETURN;
            }
          case 114: break;
          case 53: 
            { return UINT16;
            }
          case 115: break;
          case 54: 
            { return STRING;
            }
          case 116: break;
          case 55: 
            { return STRUCT;
            }
          case 117: break;
          case 56: 
            { return SWITCH;
            }
          case 118: break;
          case 57: 
            { return FLOAT64;
            }
          case 119: break;
          case 58: 
            { return FLOAT32;
            }
          case 120: break;
          case 59: 
            { return PACKAGE;
            }
          case 121: break;
          case 60: 
            { return DEFAULT;
            }
          case 122: break;
          case 61: 
            { return CONTINUE;
            }
          case 123: break;
          case 62: 
            { return COMPLEX64;
            }
          case 124: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
